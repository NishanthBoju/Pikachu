************************FIBONACCI*************************
  //without recursion
  def fibonacci(n: Int): Int = {

    if(n==1 || n==2){
      var a=n-1
      return a
    }else {
      var a = 0
      var b = 1
      var i = 0

      while (i < n-1) {
        val c = a + b
        a = b
        b = c
        i = i + 1
      }
      return a
    }
  }
      //Tail Recursion (out of all methods best practice is to use this method)
      def fibonacciTailRecursion(n: Int): Int = {
        def fib_tail(n: Int, a: Int, b: Int): Int = n match {
          case 0 | 1 => a
          case _ => fib_tail(n - 1, b, a + b)
        }

        return fib_tail(n, 0, 1)
      }
 //recursion
  def fibonacciRecursion(n: Int): Int =
    if (n==1) 0
    else if (n < 3) 1
    else fibonacci(n - 1) + fibonacci(n - 2)

  /*/* START OF MAIN FUNCTION */*/

    //FIBONACCI SERIES
    //The Fibonacci sequence begins with the following 14 integers: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233 ...
    // Each number, starting with the third, adheres to the prescribed formula.
    // For example, the seventh number, 8, is preceded by 3 and 5, which add up to 8.
    var n:Int=14; // number of digits to print
    //t = a+(n-1)d; a is first number of a series d is diff between any 2 consecutive numbers in
    // the series
    println("with Recursion")
    for (i<- 1 to n){
      print(fibonacciRecursion(i) + ", ")
    }
    print("...")

    println()
    println("without Recursion")
    for (i <- 1 to n) {
      print(fibonacci(i) + ", ")
    }
        println("with Tail Recursion")
        for (i <- 1 to n) {
          print(fibonacciTailRecursion(i) + ", ")
        }
        print("...")
//    for {i <- List.range(1, n+1)}
//      yield {
//        print(fibonacci(i) + ", ")
//      }
    println("...")
  }

  /*/* END OF MAIN FUNCTION */*/
************************FIBONACCI*************************
